---
import Layout from '../../layouts/Layout.astro';
import WarehouseSummary from '../../components/tracking/warehouse-summary.jsx';
import QuickSummaryCard from '../../components/tracking/QuickSummaryCard.jsx';
import RecentShipments from '../../components/tracking/RecentShipments.jsx';



// Quick Summary Data
const quickSummaryData = [
    { label: "Warehouses", value: "8", color: "text-blue" },
    { label: "Total Stocks", value: "11,000", color: "text-yellow" },
    { label: "Shipments Received", value: "8", color: "text-green" },
    { label: "Pending Shipments", value: "5", color: "text-red" }
];

// Icons for Quick Summary (defined in component, not in data)
const summaryIcons = ["üè≠", "üì¶", "üì•", "üîÑ"];
const baseURL = import.meta.env.SITE || 'http://localhost:4321';

const [warehouseRes, transferRes] = await Promise.all([
  fetch(`${baseURL}/api/tracking/warehouse-storage?page=1&limit=5`),
  fetch(`${baseURL}/api/tracking/transfers?page=1&limit=4`)
]);

const { data: warehouseItems = [] } = await warehouseRes.json();
const { data: recentTransfers = [] } = await transferRes.json();
---

<!-- TRACKING DASHBOARD -->
<Layout>

  <QuickSummaryCard client:load />

  <WarehouseSummary client:load />

  <div class="w-full flex gap-6">
    <!-- Recent Shipments Table -->
    <div class="w-1/2 bg-primary rounded-md p-6 text-textColor-primary font-poppins">
      <!-- Header Row -->
      <div class="flex justify-between items-center mb-6">
        <div class="flex items-center space-x-4">
          <h2 class="text-xl font-semibold">Recent Shipments</h2>
        </div>
        <a href="/tracking/shipments" class="text-btn-primary text-sm hover:underline">See All</a>
      </div>

      <!-- Table -->
      <div>
        <div class="grid grid-cols-4 text-sm font-semibold border-b border-border_color pb-2 mb-4 text-left">
          <span>Shipment ID</span>
          <span>Name</span>
          <span>Quantity</span>
          <span>Status</span>
        </div>
        <RecentShipments client:load />
      </div>
    </div>

    <!-- Recent Transfers Table -->
    <div class="w-1/2 bg-primary rounded-md p-6 text-textColor-primary font-poppins">
      <!-- Header Row -->
      <div class="flex justify-between items-center mb-6">
        <div class="flex items-center space-x-4">
          <h2 class="text-xl font-semibold">Recent Transfers</h2>
        </div>
        <a href="/tracking/Transfer_product" class="text-btn-primary text-sm hover:underline">See All</a>
      </div>

      <!-- Table -->
      <div>
        <div class="grid grid-cols-5 text-sm font-semibold border-b border-border_color pb-2 mb-4 text-left">
          <span>Transfer ID</span>
          <span>Name</span>
          <span>Qty.</span>
          <span>From</span>
          <span>To</span>
        </div>
          <div class="space-y-2 text-sm">
            {recentTransfers.map((t) => (
              <div class="grid grid-cols-5 items-center border-b border-border_color py-2">
                <span>{t.id}</span>
                <span>{t.items?.name || 'Unknown'}</span>
                <span>{t.quantity}</span>
                <span>{t.from_warehouse?.name || 'N/A'}</span>
                <span>{t.to_warehouse?.name || 'N/A'}</span>
              </div>
            ))}

            {/* Fill up to 4 rows visually */}
            {Array.from({ length: Math.max(0, 4 - recentTransfers.length) }).map(() => (
              <div class="grid grid-cols-5 items-center py-2 text-transparent">
                <span>-</span><span>-</span><span>-</span><span>-</span><span>-</span>
              </div>
            ))}
          </div>
      </div>
    </div>
  </div>
  <script>
    const dropdown = document.getElementById('dropdown');
    const selectButton = document.getElementById('select-button');
    const selectedText = document.getElementById('selected-text');
    const items = document.querySelectorAll('.dropdown-item');

    // Toggle dropdown
    selectButton.addEventListener('click', (e) => {
      e.stopPropagation(); // Prevent closing immediately
      dropdown.classList.toggle('hidden');
      selectButton.classList.toggle('border-btn-hover');
    });

    // Handle item selection
    items.forEach(item => {
      item.addEventListener('click', (e) => {
        e.preventDefault();
        const name = e.target.textContent;
        selectedText.textContent = name;

        dropdown.classList.add('hidden');
        selectButton.classList.add('border-btn-hover'); // Keep border active
      });
    });

    // Close dropdown if click outside
    document.addEventListener('click', (e) => {
      if (!dropdown.contains(e.target) && !selectButton.contains(e.target)) {
        dropdown.classList.add('hidden');
        selectButton.classList.remove('border-btn-hover');
      }
    });
  </script>

</Layout>


