---
import Layout from '../../layouts/Layout.astro';
import PurchaseOrderLogs from '../../components/reports/logs.jsx';
---

<Layout>
    <!-- Body -->
    <div class="flex-1 overflow-hidden bg-primary rounded-lg p-6 mb-6">
        <div class="flex justify-between items-center mb-4">
            <h2 class="text-textColor-primary text-xl font-semibold">Purchase Order History Logs</h2>
            <div class="flex items-center gap-2">
                <!-- Filter Button -->
                <button id="filterBtn" class="p-2 text-textColor-primary hover:bg-btn-hover hover:text-white rounded transition-colors">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M12 3c2.755 0 5.455.232 8.083.678.533.09.917.556.917 1.096v1.044a2.25 2.25 0 01-.659 1.591l-5.432 5.432a2.25 2.25 0 00-.659 1.591v2.927a2.25 2.25 0 01-1.244 2.013L9.75 21v-6.568a2.25 2.25 0 00-.659-1.591L3.659 7.409A2.25 2.25 0 013 5.818V4.774c0-.54.384-1.006.917-1.096A48.32 48.32 0 0112 3z" />
                    </svg>
                </button>
                
                <!-- Back Button -->
                <a href="/reports/Dashboard" class="p-2 text-textColor-primary hover:bg-btn-hover hover:text-white rounded">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12" />
                    </svg>
                </a>
            </div>
        </div>
        
        <!-- Filter Modal (Hidden by default) -->
        <div id="filterModal" class="fixed inset-0 bg-black/60 items-center justify-center z-50 hidden">
            <div class="bg-primary rounded-lg p-6 w-[500px] relative">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-textColor-primary text-lg font-semibold">Advanced Filters</h3>
                    <button id="closeFilterBtn" class="p-2 text-textColor-primary hover:bg-btn-hover hover:text-white rounded">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12" />
                        </svg>
                    </button>
                </div>
                
                <div class="space-y-4">
                    <!-- Date Range -->
                    <div>
                        <label class="block text-textColor-primary text-sm font-medium mb-2">Date Range:</label>
                        <div class="flex items-center gap-3">
                            <input type="date" id="dateStart" class="flex-1 px-3 py-2 bg-background text-textColor-primary rounded border border-textColor-tertiary focus:border-blue-500 text-sm">
                            <span class="text-textColor-tertiary">to</span>
                            <input type="date" id="dateEnd" class="flex-1 px-3 py-2 bg-background text-textColor-primary rounded border border-textColor-tertiary focus:border-blue-500 text-sm">
                        </div>
                    </div>
                    
                    <!-- Status Filter -->
                    <div>
                        <label class="block text-textColor-primary text-sm font-medium mb-2">Status:</label>
                        <select id="statusFilter" class="w-full px-3 py-2 bg-background text-textColor-primary rounded border border-textColor-tertiary focus:border-blue-500 text-sm">
                            <option value="">All Status</option>
                            <option value="pending">Pending</option>
                            <option value="approved">Approved</option>
                            <option value="completed">Completed</option>
                            <option value="cancelled">Cancelled</option>
                        </select>
                    </div>
                    
                    <!-- Supplier Filter -->
                    <div>
                        <label class="block text-textColor-primary text-sm font-medium mb-2">Supplier:</label>
                        <select id="supplierFilter" class="w-full px-3 py-2 bg-background text-textColor-primary rounded border border-textColor-tertiary focus:border-blue-500 text-sm">
                            <option value="">All Suppliers</option>
                            <option value="abc-suppliers">ABC Suppliers Inc.</option>
                            <option value="xyz-corp">XYZ Corporation</option>
                            <option value="global-supply">Global Supply Co.</option>
                        </select>
                    </div>
                    
                    <!-- Amount Range -->
                    <div>
                        <label class="block text-textColor-primary text-sm font-medium mb-2">Amount Range:</label>
                        <div class="flex items-center gap-3">
                            <input type="number" id="amountMin" placeholder="Min amount" class="flex-1 px-3 py-2 bg-background text-textColor-primary rounded border border-textColor-tertiary focus:border-blue-500 text-sm">
                            <span class="text-textColor-tertiary">to</span>
                            <input type="number" id="amountMax" placeholder="Max amount" class="flex-1 px-3 py-2 bg-background text-textColor-primary rounded border border-textColor-tertiary focus:border-blue-500 text-sm">
                        </div>
                    </div>
                </div>
                
                <div class="flex gap-3 mt-6">
                    <button id="clearFiltersBtn" class="flex-1 bg-background hover:bg-textColor-tertiary text-textColor-primary px-4 py-2 rounded font-medium transition-colors">
                        Clear All
                    </button>
                    <button id="applyFiltersBtn" class="flex-1 bg-btn-primary hover:bg-btn-hover text-white px-4 py-2 rounded font-medium transition-colors">
                        Apply Filters
                    </button>
                </div>
            </div>
        </div>
        
        <div class="h-full overflow-y-auto">
            <PurchaseOrderLogs client:load />
        </div>
        
        <!-- Pagination -->
        <div id="paginationContainer" class="flex justify-between items-center pt-6 border-1gs border-gray-800 flex-shrink-0 hidden">
            <div id="paginationInfo" class="text-textColor-tertiary text-sm">
                Showing 1-10 of 0 purchase orders
            </div>
            
            <div class="flex items-center gap-1">
                <!-- Previous Button -->
                <button id="prevPageBtn" class="p-2 rounded-md text-textColor-primary hover:bg-gray-700 transition-colors" title="Previous Page">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 19.5 8.25 12l7.5-7.5" />
                    </svg>
                </button>

                <!-- Page Numbers Container -->
                <div id="pageNumbers" class="flex items-center gap-1">
                    <!-- Page numbers will be inserted here dynamically -->
                </div>

                <!-- Next Button -->
                <button id="nextPageBtn" class="p-2 rounded-md text-textColor-primary hover:bg-gray-700 transition-colors" title="Next Page">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                        <path stroke-linecap="round" stroke-linejoin="round" d="m8.25 4.5 7.5 7.5-7.5 7.5" />
                    </svg>
                </button>
                
                <!-- Last Page Button -->
                <button id="lastPageBtn" class="p-2 rounded-md text-textColor-primary hover:bg-gray-700 transition-colors" title="Last Page">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                        <path stroke-linecap="round" stroke-linejoin="round" d="m5.25 4.5 7.5 7.5-7.5 7.5m6-15 7.5 7.5-7.5 7.5" />
                    </svg>
                </button>
            </div>
        </div>
    </div>
    
    <script>
        // Modal functionality
        const filterBtn = document.getElementById('filterBtn');
        const filterModal = document.getElementById('filterModal');
        const closeFilterBtn = document.getElementById('closeFilterBtn');
        const applyFiltersBtn = document.getElementById('applyFiltersBtn');
        const clearFiltersBtn = document.getElementById('clearFiltersBtn');

        if (filterBtn && filterModal && closeFilterBtn && applyFiltersBtn && clearFiltersBtn) {
            filterBtn.addEventListener('click', () => {
                filterModal.classList.remove('hidden');
                filterModal.classList.add('flex');
            });

            closeFilterBtn.addEventListener('click', () => {
                filterModal.classList.add('hidden');
                filterModal.classList.remove('flex');
            });

            // Close modal when clicking outside
            filterModal.addEventListener('click', (e) => {
                if (e.target === filterModal) {
                    filterModal.classList.add('hidden');
                    filterModal.classList.remove('flex');
                }
            });

            applyFiltersBtn.addEventListener('click', () => {
                // Get filter values
                const dateStart = document.getElementById('dateStart')?.value || '';
                const dateEnd = document.getElementById('dateEnd')?.value || '';
                const status = document.getElementById('statusFilter')?.value || '';
                const supplier = document.getElementById('supplierFilter')?.value || '';
                const amountMin = document.getElementById('amountMin')?.value || '';
                const amountMax = document.getElementById('amountMax')?.value || '';

                // Send custom event to React component with filter data
                const filterEvent = new CustomEvent('applyFilters', {
                    detail: {
                        dateRange: { start: dateStart, end: dateEnd },
                        status: status,
                        supplier: supplier,
                        amountRange: { min: amountMin, max: amountMax }
                    }
                });
                window.dispatchEvent(filterEvent);

                // Close modal
                filterModal.classList.add('hidden');
                filterModal.classList.remove('flex');
            });

            clearFiltersBtn.addEventListener('click', () => {
                // Clear all form inputs
                const dateStart = document.getElementById('dateStart');
                const dateEnd = document.getElementById('dateEnd');
                const statusFilter = document.getElementById('statusFilter');
                const supplierFilter = document.getElementById('supplierFilter');
                const amountMin = document.getElementById('amountMin');
                const amountMax = document.getElementById('amountMax');

                if (dateStart) dateStart.value = '';
                if (dateEnd) dateEnd.value = '';
                if (statusFilter) statusFilter.selectedIndex = 0;
                if (supplierFilter) supplierFilter.selectedIndex = 0;
                if (amountMin) amountMin.value = '';
                if (amountMax) amountMax.value = '';

                // Send clear filters event to React component
                const clearEvent = new CustomEvent('clearFilters');
                window.dispatchEvent(clearEvent);
            });
        }

        // Pagination functionality
        let currentPaginationData = {
            currentPage: 1,
            totalPages: 1,
            totalItems: 0,
            startIndex: 1,
            endIndex: 0,
            itemsPerPage: 10
        };

        // Listen for pagination updates from React component
        window.addEventListener('paginationUpdate', (event) => {
            currentPaginationData = event.detail;
            updatePaginationDisplay();
        });

        function updatePaginationDisplay() {
            const paginationContainer = document.getElementById('paginationContainer');
            const paginationInfo = document.getElementById('paginationInfo');
            const pageNumbers = document.getElementById('pageNumbers');
            const prevPageBtn = document.getElementById('prevPageBtn');
            const nextPageBtn = document.getElementById('nextPageBtn');
            const lastPageBtn = document.getElementById('lastPageBtn');

            if (!paginationContainer || !paginationInfo || !pageNumbers || !prevPageBtn || !nextPageBtn || !lastPageBtn) return;

            // Show pagination if there are items
            if (currentPaginationData.totalItems > 0) {
                paginationContainer.classList.remove('hidden');
                paginationContainer.classList.add('flex');
            } else {
                paginationContainer.classList.add('hidden');
                paginationContainer.classList.remove('flex');
                return;
            }

            // Update info text
            paginationInfo.textContent = `Showing ${currentPaginationData.startIndex}-${currentPaginationData.endIndex} of ${currentPaginationData.totalItems} purchase orders`;

            // Update previous button state
            if (currentPaginationData.currentPage === 1) {
                prevPageBtn.classList.add('text-gray-500', 'cursor-not-allowed');
                prevPageBtn.classList.remove('text-textColor-primary', 'hover:bg-gray-700');
                prevPageBtn.disabled = true;
            } else {
                prevPageBtn.classList.remove('text-gray-500', 'cursor-not-allowed');
                prevPageBtn.classList.add('text-textColor-primary', 'hover:bg-gray-700');
                prevPageBtn.disabled = false;
            }

            // Update next button state
            if (currentPaginationData.currentPage === currentPaginationData.totalPages) {
                nextPageBtn.classList.add('text-gray-500', 'cursor-not-allowed');
                nextPageBtn.classList.remove('text-textColor-primary', 'hover:bg-gray-700');
                nextPageBtn.disabled = true;
            } else {
                nextPageBtn.classList.remove('text-gray-500', 'cursor-not-allowed');
                nextPageBtn.classList.add('text-textColor-primary', 'hover:bg-gray-700');
                nextPageBtn.disabled = false;
            }

            // Update last page button state
            if (currentPaginationData.currentPage === currentPaginationData.totalPages) {
                lastPageBtn.classList.add('text-gray-500', 'cursor-not-allowed');
                lastPageBtn.classList.remove('text-textColor-primary', 'hover:bg-gray-700');
                lastPageBtn.disabled = true;
            } else {
                lastPageBtn.classList.remove('text-gray-500', 'cursor-not-allowed');
                lastPageBtn.classList.add('text-textColor-primary', 'hover:bg-gray-700');
                lastPageBtn.disabled = false;
            }

            // Generate page numbers with ellipsis and first/last page access
            pageNumbers.innerHTML = '';
            const totalPages = currentPaginationData.totalPages;
            const currentPage = currentPaginationData.currentPage;
            
            if (totalPages <= 7) {
                // Show all pages if 7 or fewer
                for (let i = 1; i <= totalPages; i++) {
                    createPageButton(i, currentPage === i);
                }
            } else {
                // Always show first page
                createPageButton(1, currentPage === 1);
                
                if (currentPage > 4) {
                    // Show ellipsis after first page if current page is far from start
                    createEllipsis();
                }
                
                // Calculate the range around current page
                let startPage = Math.max(2, currentPage - 1);
                let endPage = Math.min(totalPages - 1, currentPage + 1);
                
                // Adjust range to always show 3 pages in the middle (when possible)
                if (currentPage <= 4) {
                    endPage = Math.min(totalPages - 1, 5);
                }
                if (currentPage >= totalPages - 3) {
                    startPage = Math.max(2, totalPages - 4);
                }
                
                // Show pages around current page
                for (let i = startPage; i <= endPage; i++) {
                    createPageButton(i, currentPage === i);
                }
                
                if (currentPage < totalPages - 3) {
                    // Show ellipsis before last page if current page is far from end
                    createEllipsis();
                }
                
                // Always show last page
                if (totalPages > 1) {
                    createPageButton(totalPages, currentPage === totalPages);
                }
            }
        }

        function createPageButton(pageNumber, isActive) {
            const pageBtn = document.createElement('button');
            pageBtn.textContent = pageNumber;
            pageBtn.className = `px-3 py-2 rounded-md text-sm font-medium transition-colors ${
                isActive
                    ? 'bg-btn-primary text-white'
                    : 'text-textColor-primary hover:bg-gray-700 hover:text-white'
            }`;
            pageBtn.addEventListener('click', () => changePage(pageNumber));
            document.getElementById('pageNumbers').appendChild(pageBtn);
        }

        function createEllipsis() {
            const ellipsis = document.createElement('span');
            ellipsis.textContent = '...';
            ellipsis.className = 'px-2 py-2 text-textColor-tertiary text-sm';
            document.getElementById('pageNumbers').appendChild(ellipsis);
        }

        function changePage(page) {
            const changePageEvent = new CustomEvent('changePage', {
                detail: { page: page }
            });
            window.dispatchEvent(changePageEvent);
        }

        // Add event listeners for navigation buttons
        const prevPageBtn = document.getElementById('prevPageBtn');
        const nextPageBtn = document.getElementById('nextPageBtn');
        const lastPageBtn = document.getElementById('lastPageBtn');
        
        if (prevPageBtn) {
            prevPageBtn.addEventListener('click', () => {
                if (currentPaginationData.currentPage > 1) {
                    changePage(currentPaginationData.currentPage - 1);
                }
            });
        }
        
        if (nextPageBtn) {
            nextPageBtn.addEventListener('click', () => {
                if (currentPaginationData.currentPage < currentPaginationData.totalPages) {
                    changePage(currentPaginationData.currentPage + 1);
                }
            });
        }
        
        if (lastPageBtn) {
            lastPageBtn.addEventListener('click', () => {
                if (currentPaginationData.currentPage < currentPaginationData.totalPages) {
                    changePage(currentPaginationData.totalPages);
                }
            });
        }
    </script>
</Layout>