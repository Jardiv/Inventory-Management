---
import Layout from '../../layouts/Layout.astro';
import WarehouseTable from '../../components/reports/warehouse.jsx';

// Get current page from URL parameters
const currentPage = parseInt(Astro.url.searchParams.get('page') || '1');
const itemsPerPage = 10;

// Fetch pagination data from API
let paginationData = {
    currentPage: 1,
    totalPages: 1,
    totalItems: 0,
    hasNextPage: false,
    hasPreviousPage: false
};

try {
    const response = await fetch(`${Astro.url.origin}/api/reports/warehouse?page=${currentPage}&limit=${itemsPerPage}`);
    const result = await response.json();
    
    if (result.pagination) {
        paginationData = {
            currentPage: result.pagination.currentPage,
            totalPages: result.pagination.totalPages,
            totalItems: result.pagination.totalItems,
            hasNextPage: result.pagination.hasNextPage,
            hasPreviousPage: result.pagination.hasPreviousPage
        };
    }
} catch (error) {
    console.error('Failed to fetch pagination data:', error);
}

// Generate pagination pages array
function generatePaginationPages(currentPage: number, totalPages: number): (number | string)[] {
    const pages = [];
    
    // Always show first page
    if (totalPages > 0) {
        pages.push(1);
    }
    
    // Add ellipsis if needed before current page range
    if (currentPage > 4) {
        pages.push('...');
    }
    
    // Add pages around current page
    const start = Math.max(2, currentPage - 1);
    const end = Math.min(totalPages - 1, currentPage + 1);
    
    for (let i = start; i <= end; i++) {
        if (!pages.includes(i)) {
            pages.push(i);
        }
    }
    
    // Add ellipsis if needed after current page range
    if (currentPage < totalPages - 3) {
        pages.push('...');
    }
    
    // Always show last page
    if (totalPages > 1 && !pages.includes(totalPages)) {
        pages.push(totalPages);
    }
    
    return pages;
}

const paginationPages = generatePaginationPages(paginationData.currentPage, paginationData.totalPages);

// Calculate showing range
const startItem = ((paginationData.currentPage - 1) * itemsPerPage) + 1;
const endItem = Math.min(paginationData.currentPage * itemsPerPage, paginationData.totalItems);
---

<!-- WAREHOUSE CAPACITY REPORT -->
<Layout>
    <!-- Body -->

    <div class="w-full h-screen flex flex-col p-4">
        <div class="bg-primary flex-1 rounded-lg p-6 flex flex-col min-h-0">
            <div class="flex justify-between items-center mb-6">
                <h2 class="text-textColor-primary text-xl font-semibold">Warehouse Capacity Status</h2>
                <div class="flex gap-2">
                    <button class=" p-2 text-textColor-primary hover:bg-btn-hover hover:text-white rounded">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M3 16.5v2.25A2.25 2.25 0 0 0 5.25 21h13.5A2.25 2.25 0 0 0 21 18.75V16.5M16.5 12 12 16.5m0 0L7.5 12m4.5 4.5V3" />
                        </svg>
                    </button>
                    <a href="/reports/Dashboard" class="p-2 text-textColor-primary hover:bg-btn-hover hover:text-white rounded">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12" />
                        </svg>
                    </a>
                </div>
            </div>
            
            <!-- Warehouse Table -->
            <WarehouseTable currentPage={currentPage} itemsPerPage={itemsPerPage} client:load />
            
            <!-- Pagination Section -->
            <div class="flex justify-between items-center pt-6 border-t border-gray-700 flex-shrink-0">
                <!-- Showing info -->
                <div class="text-textColor-tertiary text-sm">
                    {paginationData.totalItems > 0 ? (
                        `Showing ${startItem}-${endItem} of ${paginationData.totalItems} warehouses`
                    ) : (
                        'Loading warehouses...'
                    )}
                </div>
                
                <!-- Pagination Controls -->
                {paginationData.totalItems > 0 && paginationData.totalPages > 1 && (
                    <div class="flex items-center gap-1">
                        <!-- Previous Button -->
                        <a 
                            href={paginationData.hasPreviousPage ? `/reports/Warehouse?page=${paginationData.currentPage - 1}` : '#'}
                            class={`p-2 rounded-md transition-colors ${
                                paginationData.hasPreviousPage 
                                    ? 'text-textColor-primary hover:bg-gray-700' 
                                    : 'text-gray-500 cursor-not-allowed'
                            }`}
                        >
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 19.5 8.25 12l7.5-7.5" />
                            </svg>
                        </a>

                        <!-- Page Numbers -->
                        {paginationPages.map(page => {
                            if (page === '...') {
                                return (
                                    <span class="px-3 py-2 text-gray-500">...</span>
                                );
                            }
                            
                            const isActive = page === paginationData.currentPage;
                            return (
                                <a 
                                    href={`/reports/Warehouse?page=${page}`}
                                    class={`px-3 py-2 rounded-md text-sm font-medium transition-colors ${
                                        isActive 
                                            ? 'bg-btn-primary text-white hover:bg-btn-hover ' 
                                            : 'text-textColor-primary hover:bg-gray-700 hover:text-white'
                                    }`}
                                >
                                    {page}
                                </a>
                            );
                        })}

                        <!-- Next Button -->
                        <a 
                            href={paginationData.hasNextPage ? `/reports/Warehouse?page=${paginationData.currentPage + 1}` : '#'}
                            class={`p-2 rounded-md transition-colors ${
                                paginationData.hasNextPage 
                                    ? 'text-textColor-primary hover:bg-gray-700 ' 
                                    : 'text-gray-500 cursor-not-allowed'
                            }`}
                        >
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                                <path stroke-linecap="round" stroke-linejoin="round" d="m8.25 4.5 7.5 7.5-7.5 7.5" />
                            </svg>
                        </a>
                    </div>
                )}
                
                <!-- Empty space when no pagination needed to maintain layout -->
                {(paginationData.totalItems === 0 || paginationData.totalPages <= 1) && (
                    <div></div>
                )}
            </div>
        </div>
    </div>
</Layout>