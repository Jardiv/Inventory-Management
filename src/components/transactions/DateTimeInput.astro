<div class="flex gap-8 w-full bg-primary p-4 rounded-lg">
	<label class="flex gap-2 items-center">
		from
		<div class="relative focus-within:outline-none focus-within:border-b">
			<input
				id="fromDateInput"
				type="datetime-local"
				class="w-full border-none outline-none focus:outline-none focus:ring-0 focus:border-none [&::-webkit-calendar-picker-indicator]:hidden [&::-webkit-inner-spin-button]:hidden [&::-webkit-outer-spin-button]:hidden" />
			<span
				onclick="document.getElementById('fromDateInput').showPicker()"
				class="absolute right-2.5 top-1/2 -translate-y-1/2 text-blue-500 cursor-pointer"
				>ðŸ“…</span>
		</div>
	</label>

	<label class="flex gap-2 items-center">
		to
		<div class="relative focus-within:outline-none focus-within:border-b">
			<input
				id="toDateInput"
				type="datetime-local"
				class="w-full border-none outline-none focus:outline-none focus:ring-0 focus:border-none [&::-webkit-calendar-picker-indicator]:hidden [&::-webkit-inner-spin-button]:hidden [&::-webkit-outer-spin-button]:hidden" />
			<span
				onclick="document.getElementById('toDateInput').showPicker()"
				class="absolute right-2.5 top-1/2 -translate-y-1/2 text-blue-500 cursor-pointer"
				>ðŸ“…
            </span>
		</div>
	</label>
</div>

<script>
	document.addEventListener('DOMContentLoaded', () => {
		const fromDateInput = document.getElementById('fromDateInput');
		const toDateInput = document.getElementById('toDateInput');

		const formatDateTime = (date) => {
			if (!date) return '';
			const d = new Date(date);
			const month = String(d.getMonth() + 1).padStart(2, '0');
			const day = String(d.getDate()).padStart(2, '0');
			const year = d.getFullYear();
			const hours = String(d.getHours()).padStart(2, '0');
			const minutes = String(d.getMinutes()).padStart(2, '0');
			return `${month}/${day}/${year} ${hours}:${minutes}`;
		};

		const dispatchDateChange = () => {
			const event = new CustomEvent('dateRangeChanged', {
				detail: {
					startDate: fromDateInput.value ? formatDateTime(fromDateInput.value) : '',
					endDate: toDateInput.value ? formatDateTime(toDateInput.value) : ''
				}
			});
			document.dispatchEvent(event);
		};

		fromDateInput.addEventListener('change', dispatchDateChange);
		toDateInput.addEventListener('change', dispatchDateChange);
	});
</script>
