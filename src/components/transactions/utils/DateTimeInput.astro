<div class="flex gap-8 w-full bg-primary p-4 rounded-lg">
	<label class="flex gap-2 items-center">
		from
		<div class="relative focus-within:outline-none focus-within:border-b">
			<input
				id="fromDateInput"
				type="datetime-local"
				class="w-full border-none outline-none focus:outline-none focus:ring-0 focus:border-none [&::-webkit-calendar-picker-indicator]:hidden [&::-webkit-inner-spin-button]:hidden [&::-webkit-outer-spin-button]:hidden" />
			<span
				onclick="document.getElementById('fromDateInput').showPicker()"
				class="absolute right-2.5 top-1/2 -translate-y-1/2 text-blue-500 cursor-pointer"
				>ðŸ“…</span>
		</div>
	</label>

	<label class="flex gap-2 items-center">
		to
		<div class="relative focus-within:outline-none focus-within:border-b">
			<input
				id="toDateInput"
				type="datetime-local"
				class="w-full border-none outline-none focus:outline-none focus:ring-0 focus:border-none [&::-webkit-calendar-picker-indicator]:hidden [&::-webkit-inner-spin-button]:hidden [&::-webkit-outer-spin-button]:hidden" />
			<span
				onclick="document.getElementById('toDateInput').showPicker()"
				class="absolute right-2.5 top-1/2 -translate-y-1/2 text-blue-500 cursor-pointer"
				>ðŸ“…
            </span>
		</div>
	</label>
</div>

<script>
	document.addEventListener('DOMContentLoaded', () => {
		const fromDateInput = document.getElementById('fromDateInput');
		const toDateInput = document.getElementById('toDateInput');

		// Converts MM/DD/YYYY HH:mm to YYYY-MM-DDTHH:mm for input fields
		const toInputFormat = (dateString) => {
			if (!dateString) return '';
			const parts = dateString.match(/(\d{2})\/(\d{2})\/(\d{4})\s(\d{2}):(\d{2})/);
			if (!parts) return '';
			const [, month, day, year, hours, minutes] = parts;
			return `${year}-${month}-${day}T${hours}:${minutes}`;
		};

		// Converts datetime-local input value to MM/DD/YYYY HH:mm for URL
		const toURLFormat = (date) => {
			if (!date) return '';
			const d = new Date(date);
			const month = String(d.getMonth() + 1).padStart(2, '0');
			const day = String(d.getDate()).padStart(2, '0');
			const year = d.getFullYear();
			const hours = String(d.getHours()).padStart(2, '0');
			const minutes = String(d.getMinutes()).padStart(2, '0');
			return `${month}/${day}/${year} ${hours}:${minutes}`;
		};

		// Initialize inputs from URL parameters
		const params = new URLSearchParams(window.location.search);
		const startDateFromUrl = params.get('startDate');
		const endDateFromUrl = params.get('endDate');

		if (startDateFromUrl) {
			fromDateInput.value = toInputFormat(startDateFromUrl);
		}
		if (endDateFromUrl) {
			toDateInput.value = toInputFormat(endDateFromUrl);
		}

		const handleDateChange = () => {
			const params = new URLSearchParams(window.location.search);
			const startDate = toURLFormat(fromDateInput.value);
			const endDate = toURLFormat(toDateInput.value);

			if (startDate) {
				params.set('startDate', startDate);
			} else {
				params.delete('startDate');
			}

			if (endDate) {
				params.set('endDate', endDate);
			} else {
				params.delete('endDate');
			}
            
            params.set('page', '1'); // Reset to page 1 on date change

			window.location.search = params.toString();
		};

		const handleFromDateChange = () => {
			if (fromDateInput.value) {
				toDateInput.min = fromDateInput.value;
				if (toDateInput.value && toDateInput.value < fromDateInput.value) {
					toDateInput.value = '';
				}
			}
			handleDateChange();
		};

		const handleToDateChange = () => {
			if (toDateInput.value) {
				fromDateInput.max = toDateInput.value;
				if (fromDateInput.value && fromDateInput.value > toDateInput.value) {
					fromDateInput.value = '';
				}
			}
			handleDateChange();
		};

		fromDateInput.addEventListener('change', handleFromDateChange);
		toDateInput.addEventListener('change', handleToDateChange);
	});
</script>
